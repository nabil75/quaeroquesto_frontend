import { Component, ComponentRef, ViewChild, ChangeDetectionStrategy, OnInit, Input } from '@angular/core';
import { EventEmitterService } from 'src/app/services/event-emitter.service';
import { UtilsService } from 'src/app/services/utils.service';
import { CollapseQuestionsService } from '../services/collapse-questions.service';
import { moveItemInArray, CdkDrag, CdkDragHandle, CdkDropList, CdkDragDrop, CdkDragPreview } from '@angular/cdk/drag-drop';
import { NewQuestionnaryComponent } from '../new-questionnary/new-questionnary.component';
import { FormsModule } from '@angular/forms';
import { CommonModule, NgFor } from '@angular/common';
import { MatButtonModule } from '@angular/material/button';
import { GrilleModalComponent } from '../modal/afficher-question/grille-modal/grille-modal.component';
import { AutosizeModule } from 'ngx-autosize';
import { GrilleBranchementComponent } from '../modal/branchement/grille-branchement/grille-branchement.component';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatMenuModule } from '@angular/material/menu';
import { MatIconModule } from '@angular/material/icon';
import { GrilleGeneratorComponent } from '../modal/generator-question/grille-generator/grille-generator.component';
import { ThemeService } from '../services/theme.service';
import { TranslateModule, TranslateService } from '@ngx-translate/core';


export interface ligneElement {
  libelle: string;
  position: number;
}

const ELEMENT_DATA_LIGNE: ligneElement[] = [];

export interface colonneElement {
  libelle: string;
  position: number;
}

const ELEMENT_DATA_COLONNE: colonneElement[] = [];


@Component({
  selector: 'app-grille',
  templateUrl: './grille.component.html',
  styleUrls: ['./grille.component.scss'],
  changeDetection: ChangeDetectionStrategy.Default,
  standalone: true,
  imports: [CdkDrag, CdkDragHandle, CdkDragPreview, CdkDropList, FormsModule, GrilleBranchementComponent, GrilleGeneratorComponent,
    GrilleModalComponent, CommonModule, MatButtonModule, NgFor, AutosizeModule, MatButtonToggleModule, MatMenuModule, MatIconModule,
    MatSidenavModule, TranslateModule],
})

export class GrilleComponent implements OnInit {


  @ViewChild('sideModal') sideModal!: GrilleBranchementComponent;
  @ViewChild('editGrille') editGrille!: GrilleModalComponent;
  @ViewChild('generatorModal') generatorModal!: GrilleGeneratorComponent;

  typeComponent: string = "GrilleComponent";
  dataSourceLignes = [...ELEMENT_DATA_LIGNE];
  dataSourceColonnes = [...ELEMENT_DATA_COLONNE];
  componentId: any;
  questions: any = [];
  obligatoire: string = "oui";
  isCollapse: boolean = false;
  img_collapse_expand: string = "assets/images/quaero/collapse.png";
  path_img_effacer: string = "assets/images/quaero/corbeille_blanc.png";
  libelleQuestion!: string;
  branchements: any[] = [];
  activeTheme: string = "";
  isAutoGenerated: boolean = false;
  initialContent: string[] = [];

  constructor(private eventEmitterService: EventEmitterService,
    private utilsService: UtilsService,
    public collapseQuestionsService: CollapseQuestionsService,
    private newQuestionnary: NewQuestionnaryComponent,
    private themeService: ThemeService,
    private translate: TranslateService
  ) {
    this.componentId = this.utilsService.generateUniqueId();
  }

  ngOnInit() {
    this.subscribeToThemeChanges();
  }

  ngAfterViewInit() {
  }

  // Method to subscribe to theme changes
  subscribeToThemeChanges() {
    this.themeService.activeTheme$.subscribe((theme) => {
      this.activeTheme = theme;
      this.updateImagePaths(theme);  // Update image paths based on the theme
    });
  }
  // Method to update image paths when theme changes
  updateImagePaths(theme: string) {
    if (theme === 'dark') {
      this.path_img_effacer = "assets/images/quaero/corbeille_blanc.png";
    } else {
      this.path_img_effacer = "assets/images/quaero/corbeille_noir.png";
    }
  }

  filterNumbersAfterValue(arr: number[], value: number): number[] {
    const filteredArray = arr.filter((num) => num > value);
    return filteredArray;
  }
  openSideModal(): void {
    this.sideModal.openModal();
    this.questions = [];
    const indexArray = this.newQuestionnary.getQuestionsComponentId();
    const indexArrayFiltered = this.filterNumbersAfterValue(indexArray, this.componentId);
    for (let i = 0; i < this.newQuestionnary.dynamicComponentRefs.length; i++) {
      if (indexArrayFiltered.includes(this.newQuestionnary.dynamicComponentRefs[i].instance['componentId'])) {
        this.questions.push({ "id": this.newQuestionnary.dynamicComponentRefs[i].instance['componentId'], "libelle": this.newQuestionnary.dynamicComponentRefs[i].instance.libelleQuestion });
      }
    }
  }
  remove_question(idQuestion: number) {
    this.eventEmitterService.onFirstComponentQuestionClick(idQuestion);
  }
  collapse_question(): void {
    this.isCollapse = !this.isCollapse;
  }
  onDropLigne(event: CdkDragDrop<ligneElement>) {
    moveItemInArray(this.dataSourceLignes, event.previousIndex, event.currentIndex);
    let i: number = 1;
    this.dataSourceLignes.forEach((obj) => {
      obj.position = i;
      i++;
    });
  }
  onDropColonne(event: CdkDragDrop<colonneElement>) {
    moveItemInArray(this.dataSourceColonnes, event.previousIndex, event.currentIndex);
    let i: number = 1;
    this.dataSourceColonnes.forEach((obj) => {
      obj.position = i;
      i++;
    });
  }
  addLigne() {
    const row = { 'position': (this.dataSourceLignes.length + 1), 'libelle': '' };
    this.dataSourceLignes.push(row);
  }
  removeLigne(position: number) {
    this.dataSourceLignes.splice(position - 1, 1);
    let i: number = 1;
    this.dataSourceLignes.forEach((obj) => {
      obj.position = i;
      i++;
    });
  }
  addColonne() {
    const row = { 'position': (this.dataSourceColonnes.length + 1), 'libelle': '' };
    this.dataSourceColonnes.push(row);
  }
  removeColonne(position: number) {
    this.dataSourceColonnes.splice(position - 1, 1);
    let i: number = 1;
    this.dataSourceColonnes.forEach((obj) => {
      obj.position = i;
      i++;
    });
  }
  onInputChangeLigne(event: any, position: number) {
    this.dataSourceLignes.forEach((obj) => {
      if (obj.position == position) {
        obj.libelle = event.target.value;
      }
    });
  }
  onInputChangeColonne(event: any, position: number) {
    this.dataSourceColonnes.forEach((obj) => {
      if (obj.position == position) {
        obj.libelle = event.target.value;
      }
    });
  }
  display_question_grille() {
    this.editGrille.openModal();
  }
  openGeneratorModal(): void {
    this.generatorModal.openModal();
  }
  receiveQuestion(data: string) {
    this.libelleQuestion = data;
  }
  receiveBranchements(branchementAdded: any) {
    this.branchements = branchementAdded;
  }
}
