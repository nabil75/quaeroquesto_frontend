import { Component, ViewChild, ChangeDetectionStrategy, OnInit } from '@angular/core';
import { EventEmitterService } from 'src/app/services/event-emitter.service';
import { UtilsService } from 'src/app/services/utils.service';
import { CollapseQuestionsService } from 'src/app/services/collapse-questions.service';
import { CdkDrag, CdkDragHandle, CdkDropList, CdkDragPreview } from '@angular/cdk/drag-drop';
import { NewQuestionnaryComponent } from 'src/app/new-questionnary/new-questionnary.component';
import { FormsModule } from '@angular/forms';
import { CommonModule, NgFor } from '@angular/common';
import { MatButtonModule } from '@angular/material/button';
import { AutosizeModule } from 'ngx-autosize';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatIconModule } from '@angular/material/icon';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatSidenavModule } from '@angular/material/sidenav';
import {MatMenuModule} from '@angular/material/menu';
import { OuverteModalComponent } from 'src/app/modal/afficher-question/ouverte-modal/ouverte-modal.component';
import { OuverteBranchementComponent } from 'src/app/modal/branchement/ouverte-branchement/ouverte-branchement.component';
import { OuverteGeneratorComponent } from 'src/app/modal/generator-question/ouverte-generator/ouverte-generator.component';
import { MatCardModule } from '@angular/material/card';
import { TranslateModule, TranslateService } from '@ngx-translate/core';
import { ThemeService } from 'src/app/services/theme.service';


@Component({
    selector: 'app-ouverte',
    templateUrl: './ouverte.component.html',
    styleUrls: ['./ouverte.component.scss'],
    changeDetection: ChangeDetectionStrategy.Default,
    standalone: true,
    imports: [CdkDrag, CdkDragHandle, FormsModule, OuverteBranchementComponent, 
              OuverteModalComponent, CommonModule, AutosizeModule, OuverteGeneratorComponent, 
              MatButtonModule, 
              MatExpansionModule, 
              MatIconModule,
              MatFormFieldModule,
              MatInputModule,
              MatButtonToggleModule,
              MatSidenavModule,
              MatMenuModule,
              MatCardModule,
              TranslateModule
            ],
})

export class OuverteComponent implements OnInit {
  @ViewChild('sideModal') sideModal!: OuverteBranchementComponent;
  @ViewChild('editOuverte') editOuverte!: OuverteModalComponent;
  @ViewChild('generatorModal') generatorModal!: OuverteGeneratorComponent;

  typeComponent: string="OuverteComponent"
  componentId: any;
  questions: any= [];
  obligatoire: string = "oui";  
  isCollapse: boolean = false;
  branchements: any[]=[];
  libelleQuestion: string='';
  reponseQuestion: string = '';
  activeTheme: string = '';
  isAutoGenerated: boolean = false;
  initialContent: string[] = [];

  constructor(private eventEmitterService: EventEmitterService,
              private utilsService: UtilsService,
              public collapseQuestionsService: CollapseQuestionsService,
              private newQuestionnary: NewQuestionnaryComponent,
              private translate: TranslateService,
              private themeService : ThemeService
              ){
              this.componentId = this.utilsService.generateUniqueId();
            }

  ngOnInit(){
    this.subscribeToThemeChanges();
  }

  ngAfterViewInit() {

  }

  // Method to subscribe to theme changes
  subscribeToThemeChanges() {
    this.themeService.activeTheme$.subscribe((theme) => {
      this.activeTheme = theme;
      this.updateImagePaths(theme);  // Update image paths based on the theme
    });
  }
  // Method to update image paths when theme changes
  updateImagePaths(theme: string) {
    if (theme === 'dark') {
      
    } else {
      
    }
  }

  filterNumbersAfterValue(arr: number[], value: number): number[] {
    const filteredArray = arr.filter((num) => num > value);
    return filteredArray;
  }

  openSideModal(): void {
    this.sideModal.openModal();
    this.questions=[];
    const indexArray = this.newQuestionnary.getQuestionsComponentId();
    const indexArrayFiltered = this.filterNumbersAfterValue(indexArray, this.componentId);
    for (let i = 0; i < this.newQuestionnary.dynamicComponentRefs.length; i++) {
      if (indexArrayFiltered.includes(this.newQuestionnary.dynamicComponentRefs[i].instance['componentId'] )) {
        this.questions.push({"id":this.newQuestionnary.dynamicComponentRefs[i].instance['componentId'],"libelle":this.newQuestionnary.dynamicComponentRefs[i].instance.libelleQuestion});
      }
    }
  }
  remove_question(idQuestion:number){
    this.eventEmitterService.onFirstComponentQuestionClick(idQuestion);
  }
  setValueToExpanded(){
    // this.expanded=!this.expanded;
  }
  collapse_question(): void{
      this.isCollapse = !this.isCollapse;
      // this.expanded = false;
  }

  display_question_ouverte(): void{
    this.editOuverte.openModal();
  }
  openGeneratorModal(): void {
    this.generatorModal.openModal();
  }
  receiveQuestion(data:string){
    this.libelleQuestion = data;
  }
  receiveBranchements(branchementAdded: any){
    this.branchements = branchementAdded;
  } 
}
