import { ChangeDetectionStrategy, Component, ComponentRef, Input, OnInit, ViewChild } from '@angular/core';
import { EventEmitterService } from 'src/app/services/event-emitter.service';
import { UtilsService } from 'src/app/services/utils.service';
import { CollapseQuestionsService } from '../services/collapse-questions.service';
import { moveItemInArray, CdkDrag, CdkDragHandle, CdkDropList, CdkDragPreview, CdkDragDrop } from '@angular/cdk/drag-drop';
import { FormsModule } from '@angular/forms';
import { CommonModule, NgFor } from '@angular/common';
import { MatButtonModule } from '@angular/material/button';
import { NewQuestionnaryComponent } from '../new-questionnary/new-questionnary.component';
import { AutosizeModule } from 'ngx-autosize';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatIconModule } from '@angular/material/icon';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatMenuModule} from '@angular/material/menu';
import { FermeeMultipleModalComponent } from '../modal/afficher-question/fermee-multiple-modal/fermee-multiple-modal.component';
import { FermeeMultipleBranchementComponent } from '../modal/branchement/fermee-multiple-branchement/fermee-multiple-branchement.component';
import { FermeeMultipleGeneratorComponent } from '../modal/generator-question/fermee-multiple-generator/fermee-multiple-generator.component';
import { MatSidenavModule } from '@angular/material/sidenav';
import { TranslateModule, TranslateService } from '@ngx-translate/core';
import { ThemeService } from '../services/theme.service';

export interface ModaliteElement {
  libelle: string;
  position: number;
  isChecked: boolean;
}

const ELEMENT_DATA: ModaliteElement[] = [];


@Component({
    selector: 'app-fermee-multiple',
    templateUrl: './fermee-multiple.component.html',
    styleUrls: ['./fermee-multiple.component.scss'],
    changeDetection: ChangeDetectionStrategy.Default,
    standalone: true,
    imports: [CdkDrag, CdkDragHandle, CdkDragPreview, CdkDropList, FormsModule, FermeeMultipleBranchementComponent, CommonModule,
    NgFor, FermeeMultipleModalComponent, AutosizeModule,
    MatButtonModule,
    MatExpansionModule,
    MatIconModule,
    MatFormFieldModule,
    MatInputModule,
    MatButtonToggleModule,
    MatMenuModule, 
    FermeeMultipleGeneratorComponent,
    MatSidenavModule,
    TranslateModule]
})
export class FermeeMultipleComponent implements OnInit {

  @ViewChild('sideModal') sideModal!: FermeeMultipleBranchementComponent;
  @ViewChild('editFermeeMultiple') editFermeeMultiple!: FermeeMultipleModalComponent;
  @ViewChild('generatorModal') generatorModal!: FermeeMultipleGeneratorComponent;

  typeComponent: string="FermeeMultipleComponent";
  dataSource = [...ELEMENT_DATA];

  maxReponses: number =0;
  obligatoire: string = "oui";
  ordonnee: string = "Oui";
  isCollapse: boolean = false;
  componentId: any;
  dynamicComponentModaliteRefs: ComponentRef<any>[] = [];
  questions: any[]= [];
  branchements: any[]=[];
  img_collapse_expand: string ="assets/images/quaero/collapse.png";
  libelleQuestion!: string;
  path_img_effacer: string="assets/images/quaero/corbeille_blanc.png";
  activeTheme: string = "";
  isAutoGenerated: boolean = false;
  initialContent: string[] = [];

  constructor(private eventEmitterService: EventEmitterService,
              private utilsService: UtilsService,
              public collapseQuestionsService: CollapseQuestionsService,
              private newQuestionnary: NewQuestionnaryComponent,
              private translate: TranslateService,
              private themeService: ThemeService
              ){
              this.componentId = this.utilsService.generateUniqueId();
              
            }

  ngOnInit(){
    if(this.maxReponses>this.dataSource.length){
      this.maxReponses=this.dataSource.length;
    }
    this.subscribeToThemeChanges();
  }

  ngAfterViewInit() {

  }

    // Method to subscribe to theme changes
    subscribeToThemeChanges() {
      this.themeService.activeTheme$.subscribe((theme) => {
        this.activeTheme = theme;
        this.updateImagePaths(theme);  // Update image paths based on the theme
      });
    }
    // Method to update image paths when theme changes
    updateImagePaths(theme: string) {
      if (theme === 'dark') {
        this.path_img_effacer = "assets/images/quaero/corbeille_blanc.png";
      } else {
        this.path_img_effacer = "assets/images/quaero/corbeille_noir.png";
      }
    }

  filterNumbersAfterValue(arr: number[], value: number): number[] {
    const filteredArray = arr.filter((num) => num > value);
    return filteredArray;
  }

  openSideModal(): void {
    this.sideModal.openModal();
    this.questions=[];
    const indexArray = this.newQuestionnary.getQuestionsComponentId();
    const indexArrayFiltered = this.filterNumbersAfterValue(indexArray, this.componentId);
    for (let i = 0; i < this.newQuestionnary.dynamicComponentRefs.length; i++) {
      if (indexArrayFiltered.includes(this.newQuestionnary.dynamicComponentRefs[i].instance['componentId'] )) {
        this.questions.push({"id":this.newQuestionnary.dynamicComponentRefs[i].instance['componentId'],"libelle":this.newQuestionnary.dynamicComponentRefs[i].instance.libelleQuestion});
      }
    }
  }

  remove_question(idQuestion:number){
    this.eventEmitterService.onFirstComponentQuestionClick(idQuestion);
  }

  collapse_question(): void{
    this.isCollapse = !this.isCollapse;
  }

  onDrop(event: CdkDragDrop<ModaliteElement>) {
    moveItemInArray(this.dataSource, event.previousIndex, event.currentIndex);
    let i: number = 1;
    this.dataSource.forEach( (obj) => {
      obj.position = i;
      i++;
    });
  }

  addModalite() {
    const row ={'position': (this.dataSource.length+1), 'libelle':'', 'isChecked':false};
    this.dataSource.push(row);
    this.maxReponses=this.maxReponses+1;
  }

  removeModalite(position: number) {
    this.dataSource.splice(position-1,1);
    let i: number = 1;
    this.dataSource.forEach( (obj) => {
      obj.position = i;
      i++;
    });
    this.ngOnInit();
  }

  onInputChange(event:any, position: number){ 
    this.dataSource.forEach( (obj) => {
      if(obj.position == position){
        obj.libelle = event.target.value;
      }
    });
  }

  display_question_fermee_multiple(){
    this.editFermeeMultiple.openModal();
  }

  controle_nombre_reponses(){

  }
  onKeyup(event:any){
    if (event.target.value > this.dataSource.length) {
      event.target.value = "";
    }
  }
  openGeneratorModal(): void {
    this.generatorModal.openModal();
  }
  receiveQuestion(data:string){
    this.libelleQuestion = data;
  }

  receiveBranchements(branchementAdded: any){
    this.branchements = branchementAdded;
  } 
}
