import { Component, ViewChild, ChangeDetectionStrategy, OnInit } from '@angular/core';
import { EventEmitterService } from 'src/app/services/event-emitter.service';
import { UtilsService } from 'src/app/services/utils.service';
import { CollapseQuestionsService } from '../services/collapse-questions.service';
import { NewQuestionnaryComponent } from '../new-questionnary/new-questionnary.component';
import { FormsModule } from '@angular/forms';
import { CommonModule, NgFor } from '@angular/common';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { CdkDrag, CdkDragHandle} from '@angular/cdk/drag-drop';
import { SatisfactionModalComponent } from '../modal/afficher-question/satisfaction-modal/satisfaction-modal.component';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { AutosizeModule } from 'ngx-autosize';
import { SatisfactionBranchementComponent } from '../modal/branchement/satisfaction-branchement/satisfaction-branchement.component';
import { SatisfactionGeneratorComponent } from '../modal/generator-question/satisfaction-generator/satisfaction-generator.component';
import { MatMenuModule } from '@angular/material/menu';
import { TranslateModule, TranslateService } from '@ngx-translate/core';
import { Subscription } from 'rxjs';

@Component({
    selector: 'app-satisfaction',
    templateUrl: './satisfaction.component.html',
    styleUrls: ['./satisfaction.component.scss'],
    changeDetection: ChangeDetectionStrategy.Default,
    standalone: true,
    imports: [CdkDrag, CdkDragHandle, FormsModule, 
              SatisfactionBranchementComponent, SatisfactionModalComponent, CommonModule, 
              MatButtonModule, NgFor, MatButtonToggleModule, MatIconModule, AutosizeModule, MatMenuModule,
              SatisfactionGeneratorComponent, TranslateModule
             ],
})

export class SatisfactionComponent implements OnInit{


  @ViewChild('sideModal') sideModal!: SatisfactionBranchementComponent;
  @ViewChild('editSatisfaction') editSatisfaction!: SatisfactionModalComponent;
  @ViewChild('generatorModal') generatorModal!: SatisfactionGeneratorComponent;

  typeComponent: string ="SatisfactionComponent";
  componentId: any;
  questions: any= [];
  obligatoire: string ="oui";
  isCollapse: boolean = true;
  img_collapse_expand: string ="assets/images/quaero/collapse.png";
  img_etoile: string ="assets/images/quaero/star_empty.png";
  libelleQuestion!: string;
  value: string = "";
  echelle_list: string[]=[];
  isAutoGenerated: boolean = false;
  initialContent: string[] = [];

  languageChangeSubscription: Subscription = new Subscription();

   // This is the private backing field for echelle
   private _echelle: string = "";
   
   // Getter for echelle, used in template and elsewhere
  get echelle(): string {
    return this._echelle; // Return the private backing field's value
  }

  // Setter for echelle, performs action on change
  set echelle(value: string) {
    this._echelle = value; // Update the private backing field
    this.updateEchelleList(value); // Perform actions when echelle changes
  }

  constructor(  private eventEmitterService: EventEmitterService,
                private utilsService: UtilsService,
                public collapseQuestionsService: CollapseQuestionsService,
                private newQuestionnary: NewQuestionnaryComponent,
                private translate: TranslateService
              ){
                this.componentId = this.utilsService.generateUniqueId();
              }

  // Function to update echelle_list based on echelle value
  updateEchelleList(value: string): void {
    if (value === "1") {
      this.echelle_list = [
        this.translate.instant('SATISFACTION.VERY_DISSATISFIED'),
        this.translate.instant('SATISFACTION.SOMEWHAT_DISSATISFIED'),
        this.translate.instant('SATISFACTION.MODERATELY_SATISFIED'),
        this.translate.instant('SATISFACTION.SOMEWHAT_SATISFIED'),
        this.translate.instant('SATISFACTION.VERY_SATISFIED')
      ];
    } else if (value === "2") {
      this.echelle_list = [
        this.translate.instant('SATISFACTION.EXTREMELY_DISSATISFIED'),
        this.translate.instant('SATISFACTION.VERY_DISSATISFIED'),
        this.translate.instant('SATISFACTION.SOMEWHAT_DISSATISFIED'),
        this.translate.instant('SATISFACTION.MODERATELY_SATISFIED'),
        this.translate.instant('SATISFACTION.SOMEWHAT_SATISFIED'),
        this.translate.instant('SATISFACTION.VERY_SATISFIED'),
        this.translate.instant('SATISFACTION.EXTREMELY_SATISFIED')
      ];
    }
  }

  ngOnInit(){
    // Listen for language changes and update echelle_list accordingly
    this.languageChangeSubscription = this.translate.onLangChange.subscribe(() => {
      this.updateEchelleList(this._echelle); // Update the echelle_list when the language changes
    });
  }

  ngOnDestroy() {
    // Unsubscribe from the language change event when the component is destroyed
    if (this.languageChangeSubscription) {
      this.languageChangeSubscription.unsubscribe();
    }
  }

  ngAfterViewInit() {

  }

  filterNumbersAfterValue(arr: number[], value: number): number[] {
    const filteredArray = arr.filter((num) => num > value);
    return filteredArray;
  }

  openSideModal(): void {
    this.sideModal.openModal();
    this.questions=[];
    const indexArray = this.newQuestionnary.getQuestionsComponentId();
    const indexArrayFiltered = this.filterNumbersAfterValue(indexArray, this.componentId);
    for (let i = 0; i < this.newQuestionnary.dynamicComponentRefs.length; i++) {
      if (indexArrayFiltered.includes(this.newQuestionnary.dynamicComponentRefs[i].instance['componentId'] )) {
        this.questions.push({"id":this.newQuestionnary.dynamicComponentRefs[i].instance['componentId'],"libelle":this.newQuestionnary.dynamicComponentRefs[i].instance.libelleQuestion});
      }
    }
  }

  remove_question(idQuestion:number){
    this.eventEmitterService.onFirstComponentQuestionClick(idQuestion);
  }

  collapse_question(): void{
      this.isCollapse = !this.isCollapse;
    if(this.img_collapse_expand == "assets/images/quaero/collapse.png"){
      this.img_collapse_expand = "assets/images/quaero/expand.png"
    }else{
      this.img_collapse_expand = "assets/images/quaero/collapse.png"
    }
  }

  change_note(event: any): void {
      const elData = event.target.getAttribute('data-value');
      switch(elData){
        case '1': {
          this.value="1";
        }
        break;
        case '2': {
          this.value="2";
        }
        break;
        case '3': {
          this.value="3";
        }
        break;
        case '4': {
          this.value="4";
        }
        break;
        case '5': {
          this.value="5";
        }
        break;
        case '6': {
          this.value="6";
        }
        break;
        case '7': {
          this.value="7";
        }
        break;
      }
  }

  display_question_satisfaction(){
    this.editSatisfaction.openModal();
  }

  onClickTypeEchelle(event:any):void{
    console.log(this.echelle)
  }
  
  openGeneratorModal(): void {
    this.generatorModal.openModal();
  }

  receiveQuestion(data:string){
    this.libelleQuestion = data;
  }
}
